# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new release build to the App Store"
  lane :release do |options|
    build_number = increment_build_number(xcodeproj: "MissionHub.xcodeproj")

    version_number = increment_version_number(
        bump_type: options[:bump_type].presence || 'patch' # Automatically increment major version number
    )

    # Travis requires a keychain to be created to store the certificates in, however
    # using this utility to create a keychain locally will really mess up local keychains
    # and is not required for a successful build
    if is_ci?
      create_keychain(
          name: ENV["MATCH_KEYCHAIN_NAME"],
          password: ENV["MATCH_PASSWORD"],
          default_keychain: true,
          unlock: true,
          timeout: 3600,
          add_to_search_list: true
      )

      match(readonly: true,
            type: 'Release',
            keychain_name: ENV["MATCH_KEYCHAIN_NAME"],
            keychain_password: ENV["MATCH_PASSWORD"])
    else
      # Locally match will prompt on the first run for the "MATCH_PASSWORD" and remember it
      # in the environment after that.
      match(readonly: true)
    end

    gym(
        scheme: "MissionHub",
        export_options: {
            provisioningProfiles: {
                "com.missionhub" => "match Release com.missionhub"
            }
        }
    )
    upload_to_app_store(
      app_identifier: 'com.missionhub',
      ipa: './MissionHub.ipa',
      skip_screenshots: true,
      skip_metadata: true,
      version: version_number,
      automatic_release: options[:automatic_release].presence? || false,
      submit_for_review: options[:submit_for_review].presence? || false,
    )

    commit_version_bump(
        xcodeproj: 'MissionHub.xcodeproj',
        message: "[skip ci] Version number bump to #{version_number}, Build number bump to ##{build_number}"
    )

    travis_branch = ENV["TRAVIS_BRANCH"]

    sh('git', 'checkout', travis_branch)

    push_to_git_remote

    hipchat(
        message: "MissionHub iOS Release Build ##{version_number} (#{build_number}) submitted to App Store.",
        channel: "MissionHub - Engineering",
        version: "2",
        custom_color: "green"
    )
  end
  
  desc "Push a new (beta) release build to Crashlytics"
  lane :beta do
    build_number = increment_build_number(xcodeproj: "MissionHub.xcodeproj")

    # Travis requires a keychain to be created to store the certificates in, however
    # using this utility to create a keychain locally will really mess up local keychains
    # and is not required for a successful build
    if is_ci?
      create_keychain(
          name: ENV["MATCH_KEYCHAIN_NAME"],
          password: ENV["MATCH_PASSWORD"],
          default_keychain: true,
          unlock: true,
          timeout: 3600,
          add_to_search_list: true
      )

      match(readonly: true,
            keychain_name: ENV["MATCH_KEYCHAIN_NAME"],
            keychain_password: ENV["MATCH_PASSWORD"])
    else
      # Locally match will prompt on the first run for the "MATCH_PASSWORD" and remember it
      # in the environment after that.
      match(readonly: true)
    end

    gym(
        scheme: "MissionHub",
        export_method: "ad-hoc",
        export_options: {
        provisioningProfiles: {
        "com.missionhub" => "match AdHoc com.missionhub"
        }
      }
    )

    crashlytics(
                crashlytics_path: "./Crashlytics.framework",
                ipa_path: "./MissionHub.ipa",
                groups: "missionhub-ios",
                notes_path: "./release_notes/releaseNotes.txt"
    )

    clean_build_artifacts

    travis_branch = ENV["TRAVIS_BRANCH"]

    sh('git', 'checkout', travis_branch)

    commit_version_bump(
        xcodeproj: 'MissionHub.xcodeproj',
        message: "[skip ci] Build number bump to ##{build_number}"
    )

    push_to_git_remote

    hipchat(
            message: "MissionHub iOS Beta Build ##{build_number} released to Crashlytics.",
            channel: "MissionHub - Engineering",
            version: "2",
            custom_color: "green"
    )
    end
end
