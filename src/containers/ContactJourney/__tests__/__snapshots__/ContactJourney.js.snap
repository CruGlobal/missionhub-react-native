// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContactJourney renders loading screen correctly 1`] = `
<SafeAreaView
  style={
    Object {
      "backgroundColor": "#ffffff",
      "flex": 1,
    }
  }
>
  <Flex
    align="center"
    justify="center"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "flex": 1,
      }
    }
    value={1}
  >
    <LoadingGuy />
  </Flex>
  <Flex
    justify="end"
  >
    <Connect(JourneyCommentBox)
      hideActions={true}
      person={
        Object {
          "first_name": "ben",
          "id": "123",
          "organizational_permissions": Array [
            Object {
              "organization_id": 2,
            },
          ],
        }
      }
    />
  </Flex>
</SafeAreaView>
`;

exports[`ContactJourney renders null screen correctly 1`] = `
<SafeAreaView
  style={
    Object {
      "backgroundColor": "#ffffff",
      "flex": 1,
    }
  }
>
  <Flex
    align="center"
    justify="center"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "flex": 1,
      }
    }
    value={1}
  >
    <NullStateComponent
      descriptionText="This is where MissionHub saves all of your completed steps and any notes you added along the way."
      headerText="OUR JOURNEY"
      imageSource={
        Object {
          "testUri": "../../../assets/images/ourJourney.png",
        }
      }
    />
  </Flex>
  <Flex
    justify="end"
  >
    <Connect(JourneyCommentBox)
      hideActions={true}
      person={
        Object {
          "first_name": "ben",
          "id": "123",
          "organizational_permissions": Array [
            Object {
              "organization_id": 2,
            },
          ],
        }
      }
    />
  </Flex>
</SafeAreaView>
`;

exports[`ContactJourney renders screen as personal ministry 1`] = `
<SafeAreaView
  style={
    Object {
      "backgroundColor": "#ffffff",
      "flex": 1,
    }
  }
>
  <Flex
    align="center"
    justify="center"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "flex": 1,
      }
    }
    value={1}
  >
    <FlatList
      ItemSeparatorComponent={[Function]}
      bounces={true}
      data={
        Array [
          Object {
            "_type": "accepted_challenge",
            "date": "2010-01-01 12:12:12",
            "id": "84472",
          },
        ]
      }
      disableVirtualization={false}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onEndReachedThreshold={2}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={100}
      showsVerticalScrollIndicator={false}
      style={
        Object {
          "backgroundColor": "transparent",
          "borderBottomColor": "#E6E8EC",
          "borderBottomWidth": 1,
        }
      }
      updateCellsBatchingPeriod={50}
      windowSize={21}
    />
  </Flex>
  <Flex
    justify="end"
  >
    <Connect(JourneyCommentBox)
      hideActions={true}
      person={
        Object {
          "first_name": "ben",
          "id": "123",
          "organizational_permissions": Array [
            Object {
              "organization_id": 2,
            },
          ],
        }
      }
    />
  </Flex>
</SafeAreaView>
`;

exports[`ContactJourney renders screen with steps correctly 1`] = `
<SafeAreaView
  style={
    Object {
      "backgroundColor": "#ffffff",
      "flex": 1,
    }
  }
>
  <Flex
    align="center"
    justify="center"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "flex": 1,
      }
    }
    value={1}
  >
    <FlatList
      ItemSeparatorComponent={[Function]}
      bounces={true}
      data={
        Array [
          Object {
            "_type": "accepted_challenge",
            "date": "2010-01-01 12:12:12",
            "id": "84472",
          },
        ]
      }
      disableVirtualization={false}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onEndReachedThreshold={2}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={100}
      showsVerticalScrollIndicator={false}
      style={
        Object {
          "backgroundColor": "transparent",
          "borderBottomColor": "#E6E8EC",
          "borderBottomWidth": 1,
        }
      }
      updateCellsBatchingPeriod={50}
      windowSize={21}
    />
  </Flex>
  <Flex
    justify="end"
  >
    <Connect(JourneyCommentBox)
      hideActions={true}
      person={
        Object {
          "first_name": "ben",
          "id": "123",
          "organizational_permissions": Array [
            Object {
              "organization_id": 2,
            },
          ],
        }
      }
    />
  </Flex>
</SafeAreaView>
`;

exports[`journey methods renders a stage change row 1`] = `
<withI18nextTranslation(JourneyItem)
  item={
    Object {
      "_type": "pathway_progression_audit",
      "id": "124",
    }
  }
  myId="123"
  personFirstName="ben"
/>
`;

exports[`journey methods renders a step row 1`] = `
<withI18nextTranslation(RowSwipeable)
  bump={false}
  editPressProps={
    Array [
      Object {
        "_type": "accepted_challenge",
        "id": "123",
        "note": "123",
      },
    ]
  }
  onEdit={[Function]}
>
  <withI18nextTranslation(JourneyItem)
    item={
      Object {
        "_type": "accepted_challenge",
        "id": "123",
        "note": "123",
      }
    }
    myId="123"
    personFirstName="ben"
  />
</withI18nextTranslation(RowSwipeable)>
`;

exports[`journey methods renders a survey row 1`] = `
<withI18nextTranslation(JourneyItem)
  item={
    Object {
      "_type": "answer_sheet",
      "id": "124",
      "text": "124",
    }
  }
  myId="123"
  personFirstName="ben"
/>
`;

exports[`journey methods renders an interaction row 1`] = `
<withI18nextTranslation(RowSwipeable)
  bump={false}
  editPressProps={
    Array [
      Object {
        "_type": "interaction",
        "comment": "123",
        "id": "123",
      },
    ]
  }
  onEdit={[Function]}
>
  <withI18nextTranslation(JourneyItem)
    item={
      Object {
        "_type": "interaction",
        "comment": "123",
        "id": "123",
      }
    }
    myId="123"
    personFirstName="ben"
  />
</withI18nextTranslation(RowSwipeable)>
`;

exports[`journey methods should render item separator 1`] = `<Separator />`;

exports[`renders with an organization correctly 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "#ffffff",
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "#ffffff",
          "flex": 1,
        },
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        },
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "flex": 1,
          },
          Object {
            "alignItems": "center",
            "justifyContent": "center",
          },
        ]
      }
    >
      <View
        style={
          Array [
            Object {},
            Object {
              "flex": 2,
            },
          ]
        }
      />
      <View
        style={
          Array [
            Object {},
            Object {
              "flex": 10,
            },
          ]
        }
      >
        <Image
          resizeMode="contain"
          source={
            Object {
              "testUri": "../../../assets/gifs/HappyBlueLoop.gif",
            }
          }
          style={
            Object {
              "flex": 1,
              "width": 750,
            }
          }
        />
      </View>
      <View
        style={
          Array [
            Object {},
            Object {
              "flex": 2,
            },
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#505256",
              },
              Object {
                "fontFamily": "AmaticSC-Bold",
              },
              Object {
                "color": "#007398",
                "fontSize": 64,
                "paddingVertical": 0,
              },
            ]
          }
        >
          loading
        </Text>
      </View>
      <View
        style={
          Array [
            Object {},
            Object {
              "flex": 2,
            },
          ]
        }
      />
    </View>
  </View>
  <View
    style={
      Array [
        Object {},
        Object {
          "justifyContent": "flex-end",
        },
      ]
    }
  >
    <View
      style={
        Array [
          Array [
            Object {
              "backgroundColor": "#ffffff",
              "borderTopColor": "#B2B0B2",
              "borderTopWidth": 1,
              "paddingBottom": 5,
              "paddingTop": 5,
              "width": 750,
            },
            undefined,
          ],
          Object {
            "flexDirection": "column",
          },
        ]
      }
    >
      <View
        style={
          Array [
            Object {
              "marginBottom": 5,
              "marginHorizontal": 10,
              "paddingHorizontal": 5,
            },
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "justifyContent": "center",
            },
          ]
        }
      >
        <View
          style={
            Array [
              Array [
                Object {
                  "backgroundColor": "#007398",
                  "borderRadius": 25,
                  "marginRight": 15,
                },
                null,
              ],
              Object {
                "alignItems": "center",
                "justifyContent": "center",
              },
            ]
          }
        >
          <View
            accessible={true}
            isTVSelectable={true}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <View
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                  },
                  null,
                  Object {},
                  null,
                ]
              }
            >
              <Text
                allowFontScaling={false}
                style={
                  Array [
                    Object {
                      "color": undefined,
                      "fontSize": 12,
                    },
                    Array [
                      Object {
                        "color": "#ffffff",
                      },
                      Object {
                        "fontSize": 13,
                      },
                      Array [
                        Object {
                          "margin": 10,
                        },
                        Object {},
                      ],
                    ],
                    Object {
                      "fontFamily": "icomoon",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                    Object {},
                  ]
                }
              >
                
              </Text>
            </View>
          </View>
        </View>
        <View
          style={
            Array [
              Object {
                "backgroundColor": "#ffffff",
                "borderColor": "#B2B0B2",
                "borderRadius": 20,
                "borderWidth": 1,
              },
              Object {
                "alignItems": "center",
                "alignSelf": "stretch",
                "flex": 1,
                "flexDirection": "column",
                "justifyContent": "center",
              },
            ]
          }
        >
          <View
            style={
              Array [
                Object {
                  "paddingLeft": 13,
                },
                Object {
                  "alignItems": "center",
                  "alignSelf": "stretch",
                  "flexDirection": "row",
                  "justifyContent": "center",
                },
              ]
            }
          >
            <TextInput
              allowFontScaling={true}
              autoCorrect={true}
              autoFocus={false}
              blurOnSubmit={true}
              multiline={false}
              onChangeText={[Function]}
              placeholder="Share something to be remembered..."
              placeholderTextColor="#B2B0B2"
              rejectResponderTermination={true}
              returnKeyType="done"
              selectionColor="#005A7F"
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderBottomColor": "#52C5DC",
                    "borderBottomWidth": 1,
                    "color": "#ffffff",
                    "fontFamily": "SourceSansPro-Regular",
                    "fontSize": 16,
                    "letterSpacing": 0.25,
                    "paddingVertical": 5,
                  },
                  Object {
                    "borderBottomWidth": 0,
                    "color": "#4E4C4E",
                    "flex": 1,
                    "fontSize": 16,
                    "paddingLeft": 5,
                    "paddingVertical": 7,
                  },
                ]
              }
              underlineColorAndroid="rgba(0,0,0,0)"
              value=""
            />
          </View>
        </View>
      </View>
    </View>
  </View>
</RCTSafeAreaView>
`;
